@using Microsoft.Extensions.Configuration

@if (!string.IsNullOrEmpty(_editorId))
{
    <div id="markdown-container-@(_editorId)" style="@HeightStyle">
        <div id="@_editorId"></div>
        <input type="hidden" id="txt@(_editorId)" value="@(_baseAddress + UploadAction)"/>
    </div>
}

@code {
    [Parameter] public required string Markdown { get; set; }

    [Parameter] public required string UploadAction { get; set; }
    
    [Parameter] public int? Height { get; set; }

    [Parameter] public string HeightUnit { get; set; } = "px";

    private string HeightStyle => Height == null ? "" : $"height:{Height}{HeightUnit ?? "px"}";

    private readonly string _editorId = Guid.NewGuid().ToString("N");

    private string _baseAddress;

    [Inject] private IConfiguration Configuration { get; set; }

    [Inject] private IJSRuntime JsRuntime { get; set; }
    
    [Inject]private ILocalStorageService LocalStorageService { get; set; }

    private static int _number = 0;

    protected override async Task OnInitializedAsync()
    {
        var editorTheme = await LocalStorageService.GetItemAsync<string>("cherry-theme");
        if (editorTheme == null)
        {
            await LocalStorageService.SetItemAsync("cherry-theme", "dark");
        }
        _baseAddress = Configuration.GetSection("BaseAddress").Get<string>();
#if DEBUG
        Console.WriteLine("markdown editor init: {0},ElementId:{1},Markdown:{2}", _number++, _editorId, Markdown);
#endif
        await Task.FromResult(base.OnInitializedAsync());
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("createNewEditor", _editorId, Markdown);
        }
    }

    public async Task<string> GetValueAsync()
    {
        return await JsRuntime.InvokeAsync<string>("getMarkdown");
    }

    public Task DisposeAsync()
    {
        return Task.CompletedTask;
    }

}